   - name: "Run script to stop the server"
     become: True
     command: sh stop.sh arg1
     register: d3s_stop_debug
     args:
         chdir: "{{ D3S_rootPath }}"
     ignore_errors: yes


   - name: "Get PID of the server "
     become: True
     shell:  "ps -ef | grep {{ D3S_process }} | grep -v grep | awk '{print $2}'"
     register: pid_proc


   - name: "Show PID of the server"
     debug:
       var: pid_proc.stdout
     when: pid_proc|failed


   - name: "Waiting the process stops"
     wait_for:
       path: "/proc/{{pid_proc.stdout}}/status"
       state: absent

   - name: "D3S has stopped"
     debug:
       var: d3s_stop_debug.stdout
     when: d3s_stop_debug|succeeded


   - name: "D3S remove folder"
     shell: "rm {{ D3S_rootPath }}/lib/*"


   - name: "Move lib into server"
     copy:
      src: "{{ localD3S_distPath }}/libs.tgz"
      dest: "{{  D3S_rootPath }}/lib/"

   - name: "Move config datasources properties into server"
     copy:
      src: "{{ localD3S_distPath }}/config/datasources.properties"
      dest: "{{  D3S_rootPath }}//config/datasources.properties"


   - name: "Unzip libs into lib"
     unarchive:
       src: "{{ D3S_rootPath}}/lib/libs.tgz"
       dest: "{{ D3S_rootPath}}/lib/"
       remote_src: True

   - name: "Clean zip file into path"
     file:
      path: "{{ D3S_rootPath}}/lib/libs.tgz"
      state: absent

   - name: "Start server"
     shell: ./start.sh
     register: d3s_start_debug
     args:
       chdir: "{{ D3S_rootPath}}"
     async: 1000
     poll: 0


   - name: "Wait for d3s to come up"
     uri:
       url: "{{ D3S_service }}/mdsd"
     register: result_get
     until: result_get.status == 200
     retries: 6
     delay: 10

   - name: "D3S debug fails"
     debug:
       var: d3s_start_debug
     when: d3s_start_debug|failed

   - name: "D3S debug start"
     debug:
       var: d3s_start_debug
     when: d3s_start_debug|succeeded
